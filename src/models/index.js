//src/models/index.js
const sequelize = require("../config/db");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const User = require("./User");
const UserProfile = require("./UserProfile");
const Recruiter = require("./Recruiter");
const StatusHistory = require("./StatusHistory");
const Vacancy = require("./Vacancy");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
// –°–í–Ø–ó–¨ –û–î–ò–ù –ö –û–î–ù–û–ú–£
// –°–æ —Å—Ç–æ—Ä–æ–Ω—ã User: "–£ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å"
User.hasOne(UserProfile, {
  foreignKey: "userId",           // –í —Ç–∞–±–ª–∏—Ü–µ UserProfile –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü userId
  onDelete: "CASCADE",            // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ User - —É–¥–∞–ª–∏—Ç—å –∏ UserProfile
});

// –°–æ —Å—Ç–æ—Ä–æ–Ω—ã UserProfile: "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" 
UserProfile.belongsTo(User, {
  foreignKey: "userId",           // –£—Ç–æ—á–Ω—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü —è–≤–ª—è–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
});
/* 
Sequelize –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–¥–∏–Ω-–∫-–æ–¥–Ω–æ–º—É
–í —Ç–∞–±–ª–∏—Ü–µ user_profiles –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü userId, –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ id –≤ —Ç–∞–±–ª–∏—Ü–µ users
–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–∂–µ —É–¥–∞–ª–∏—Ç—Å—è
*/


// –°–í–Ø–ó–¨ –û–î–ò–ù –ö–û –ú–ù–û–ì–ò–ú
// –°–æ —Å—Ç–æ—Ä–æ–Ω—ã User: "–£ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤"
User.hasMany(Recruiter, {
  foreignKey: "userId",         // –í —Ç–∞–±–ª–∏—Ü–µ recruiters –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü userId
  onDelete: "CASCADE",          // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ User - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –µ–≥–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã
});

// –°–æ —Å—Ç–æ—Ä–æ–Ω—ã Recruiter: "–†–µ–∫—Ä—É—Ç–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
Recruiter.belongsTo(User, {
  foreignKey: "userId",         // –£—Ç–æ—á–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
});

User.hasMany(Vacancy, {
  foreignKey: "userId",         // –í —Ç–∞–±–ª–∏—Ü–µ vacancy –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü userId
  onDelete: "CASCADE",          // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ User - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–∏
});

// –°–æ —Å—Ç–æ—Ä–æ–Ω—ã Vacancy: "–í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
Vacancy.belongsTo(User, {
  foreignKey: "userId",         // –£—Ç–æ—á–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
});

// –†–µ–∫—Ä—É—Ç–µ—Ä –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
Recruiter.hasMany(StatusHistory, {
  foreignKey: 'entityId',
  constraints: false,
  scope: { entityType: 'recruiter' }, // —Ñ–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤, Sequelize –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–ª —É—Å–ª–æ–≤–∏–µ WHERE entityType = 'recruiter' 
  as: 'statusHistory'
});


// –í–∞–∫–∞–Ω—Å–∏—è –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏  
Vacancy.hasMany(StatusHistory, {
  foreignKey: 'entityId', 
  constraints: false,
  scope: { entityType: 'vacancy' }, // —Ñ–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
  as: 'statusHistory'
});

// –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –ò–õ–ò –≤–∞–∫–∞–Ω—Å–∏–∏
StatusHistory.belongsTo(Recruiter, { foreignKey: 'entityId', constraints: false });
StatusHistory.belongsTo(Vacancy, { foreignKey: 'entityId', constraints: false });


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const models = {
  sequelize,
  User,
  UserProfile,
  Recruiter,
  StatusHistory,
  Vacancy,
};

const initializeDatabase = async () => {
  try {
    await sequelize.authenticate();
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (${process.env.NODE_ENV})`);

    const syncOptions = {};

    if (process.env.NODE_ENV === "development") {
      syncOptions.alter = true;
      console.log("üîÑ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –≤–∫–ª—é—á–µ–Ω auto-alter");
    } else {
      syncOptions.alter = false;
      console.log("üîí Production —Ä–µ–∂–∏–º: –æ—Ç–∫–ª—é—á–µ–Ω auto-alter");
    }

    await sequelize.sync(syncOptions);
    console.log("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");

    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ë–î:", error.message);
    return false;
  }
};

module.exports = { models, initializeDatabase }; // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —ç–∫—Å–ø–æ—Ä—Ç
