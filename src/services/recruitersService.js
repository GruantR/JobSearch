//src/services/recruitersServices.js
const { models } = require("../models/index");
const { Recruiter, StatusHistory } = models;
const {
  NotFoundError,
  StatusValidationError,
} = require("../errors/customErrors");
const statusHistoryService = require("./statusHistoryService");

class RecruiterService {
  // –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
  get validStatuses() {
    return [
      "contacting",
      "waiting",
      "in_process",
      "got_offer",
      "rejected",
      "archived",
    ];
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  validateStatus(status) {
    if (!this.validStatuses.includes(status)) {
      throw new StatusValidationError(
        `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: "${status}". –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${this.validStatuses.join(
          ", "
        )}`
      );
    }
    return true;
  }

  async createRecruiter(info) {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const recruiterData = { ...info, status: 'contacting' };
    const recruiter = await Recruiter.create(recruiterData);
    return recruiter;
  }

  async getRecruiters(userId) {
    const recruiters = await Recruiter.findAll({ where: { userId } });
    return recruiters;
  }

  async getRecruiter(id, userId) {
    const recruiter = await Recruiter.findOne({ where: { id, userId } });
    if (!recruiter) {
      throw new NotFoundError("–†–µ–∫—Ä—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    return recruiter;
  }

  async deleteRecruiter(id, userId) {
    const recruiter = await Recruiter.findOne({ where: { id, userId } });
    if (!recruiter) {
      throw new NotFoundError("–†–µ–∫—Ä—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    await recruiter.destroy();
    console.log(
      `‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä —É–¥–∞–ª–µ–Ω: ${recruiter.fullName} (ID: ${recruiter.id})`
    );
    return {
      id: recruiter.id,
      fullName: recruiter.fullName,
    };
  }

  async patchRecruiterData(id, userId, updateData) {
    if (updateData.status) {
      throw new StatusValidationError(
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ updateRecruiterStatus"
      );
    }

    const recruiter = await Recruiter.findOne({ where: { id, userId } });
    if (!recruiter) {
      throw new NotFoundError("–†–µ–∫—Ä—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    const updateRecruiter = await recruiter.update(updateData);
    return updateRecruiter;
  }

  validateStatusTransition(oldStatus, newStatus) {
    if (oldStatus === newStatus) {
      return true;
    }

    this.validateStatus(oldStatus);
    this.validateStatus(newStatus);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    const allowedTransitions = {
      contacting: ["waiting", "in_process", "rejected", "archived"],
      waiting: ["in_process", "rejected", "archived", "contacting"],
      in_process: ["waiting", "got_offer", "rejected", "archived"],
      got_offer: ["archived"],
      rejected: ["archived"],
      archived: ["contacting"], // –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞
    };
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å (oldStatus null) - —Ä–∞–∑—Ä–µ—à–∞–µ–º
    if (!oldStatus) return true;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥
    const allowedNextStatuses = allowedTransitions[oldStatus];
    if (!allowedNextStatuses) {
      throw new StatusValidationError(
        `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${oldStatus}`
      );
    }
    if (!allowedNextStatuses.includes(newStatus)) {
      throw new StatusValidationError(
        `–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ "${oldStatus}" –≤ "${newStatus}".\n` +
          `–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${allowedNextStatuses.join(", ")}`
      );
    }
    return true;
  }

  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  getStatusDescription(status) {
    const descriptions = {
      contacting: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ üìû",
      waiting: "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ‚è≥",
      in_process: "–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ üí¨",
      got_offer: "–ü–æ–ª—É—á–µ–Ω –æ—Ñ—Ñ–µ—Ä üéâ",
      rejected: "–û—Ç–∫–∞–∑ ‚ùå",
      archived: "–í –∞—Ä—Ö–∏–≤–µ üìÅ",
    };
    return descriptions[status] || status;
  }

  async updateRecruiterStatus(recruiterId, userId, newStatus, notes = "") {
    const recruiter = await this.getRecruiter(recruiterId, userId);
    const oldStatus = recruiter.status;

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê
    this.validateStatusTransition(oldStatus, newStatus);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    const updateData = { status: newStatus };
    if (notes) {
      updateData.notes = notes;
    }

    // –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if (["in_process", "waiting"].includes(newStatus)) {
      updateData.lastContactDate = new Date();
    }

    await recruiter.update(updateData);
    await statusHistoryService.addStatusChange(
      "recruiter",
      recruiterId,
      oldStatus,
      newStatus,
      notes
    );
    return recruiter;
  }

  async getRecruiterWithHistory(id, userId) {
    const recruiter = await Recruiter.findOne({
      where: { id, userId },
      include: [
        {
          model: StatusHistory,
          as: "statusHistory",
          attributes: ["oldStatus", "newStatus", "notes", "changedAt"],
          order: [["changedAt", "DESC"]], // —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        },
      ],
    });

    if (!recruiter) {
      throw new NotFoundError("–†–µ–∫—Ä—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    return recruiter;
  }
}

module.exports = new RecruiterService();
