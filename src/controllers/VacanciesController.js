const VacanciesService = require("../services/vacanciesService");

class VacanciesController {
  async createVacancy(req, res, next) {
    try {
      const vacancy = await VacanciesService.createVacancy({
        ...req.body,
        userId: req.userId,
      });
      res.status(201).json({
        success: true,
        message: "–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞",
        data: {
          vacancy: vacancy,
        },
      });
    } catch (err) {
      next(err);
    }
  }

  async getVacancies(req, res, next) {
    try {
      const userId = req.userId;
      const vacancies = await VacanciesService.getVacancies(userId);
      res.json({
        success: true,
        message: "–í–∞—à —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π",
        data: {
          vacancies: vacancies,
        },
      });
    } catch (err) {
      next(err);
    }
  }

  async getVacancy(req, res, next) {
    try {
      const userId = req.userId;
      const id = req.params.id;
      const vacancy = await VacanciesService.getVacancy(id, userId);
      res.json({
        success: true,
        message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏",
        data: { vacancy: vacancy },
      });
    } catch (err) {
        next (err);
    }
  }

  async deleteVacancy (req,res, next) {
    try{
        const userId = req.userId;
        const id = req.params.id;
        const deleteVacancy = await VacanciesService.deleteVacancy(id, userId);
        res.json({
            success: true,
            message: "–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞",
            data: {
                deleteVacancy: deleteVacancy
            }
        })
    }catch(err){
        next(err)
    }
  };

  async patchVacancyData (req, res, next){
    try{
        const userId = req.userId;
        const id = req.params.id;
        const updateData = req.body;
        const updateVacancy = await VacanciesService.patchVacancyData(id, userId, updateData);
        res.json({
            success: true,
            message: '–î–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            data: {
                updateVacancy: updateVacancy 
            }
        })
    }catch(err) {
        next(err)
    }
  };

  async updateVacancyStatus (req, res, next) {
    try{
        const userId = req.userId;
        const id = req.params.id;
        const newStatus = req.body.status;
        const notes = req.body.notes;
        const newVacancyStatus = await VacanciesService.updateVacancyStatus(id, userId, newStatus, notes);
        const statusMessages = {
            found: "–ù–∞–π–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è üîç - –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏",
            applied: "–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è üì§ - –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞", 
            waiting: "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ ‚è≥ - –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
            interview: "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ üíº - –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π",
            got_offer: "–ü–æ–ª—É—á–µ–Ω –æ—Ñ—Ñ–µ—Ä üéâ - —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            rejected: "–û—Ç–∫–∞–∑ ‚ùå - –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            archived: "–í –∞—Ä—Ö–∏–≤–µ üìÅ - –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"
          };
          res.json({
            success: true,
            message: statusMessages[newStatus] || '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω',
            data: {
                newVacancyStatus: newVacancyStatus
            }
          })

    }catch(err) {
        next(err)
    }
  };

  async getVacancyWithHistory (req, res, next) {
    try{
        const id = req.params.id;
        const userId = req.userId;
        const vacancy = await VacanciesService.getVacancyWithHistory(id, userId);
        res.json({
            success: true,
            message: '–í–∞–∫–∞–Ω—Å–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞',
            data: {
                vacancy: vacancy
            }
        })

    }catch(err) {
        next(err)
    }
  }
}

module.exports = new VacanciesController();
