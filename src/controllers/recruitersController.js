//src/controllers/recruitersController.js

const RecruiterService = require("../services/recruitersService");

class RecruiterController {
  async createRecruiter(req, res, next) {
    try {        
      const data = { ...req.body, userId: req.userId };
      const recruiter = await RecruiterService.createRecruiter(data);
      res.json({
        success: true,
        message: "–†–µ–∫—Ä—É—Ç—ë—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î",
        data: { recruiter: recruiter },
      });
    } catch (err) {
      next(err);
    }
  };

  async getRecruiters (req,res,next) {
    try{
        const userId = req.userId;
        const recruiters = await RecruiterService.getRecruiters(userId);
        res.json({
            success: true,
            message: "–í–∞—à —Å–ø–∏—Å–æ–∫ —Ä–µ–∫—Ä—É—Ç—ë—Ä–æ–≤",
            data: {
                recruiters: recruiters
            }
        })
    }catch(err) {
        next(err);
    }
  };

  async getRecruiter (req,res,next){
    try{
        const userId = req.userId;
        const id = req.params.id;
        const recruiter = await RecruiterService.getRecruiter(id, userId);
        res.json({
            success: true,
            message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∫—Ä—É—Ç–µ—Ä–µ",
            data: {recruiter: recruiter}
        })

    }catch(err){
        next(err);
    }
  };

  async deleteRecruiter (req,res,next) {
    try{
        const userId = req.userId;
        const id = req.params.id;
        const deleteRecruiter = await RecruiterService.deleteRecruiter(id, userId);
        res.json({
            success: true,
            message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∫—Ä—É—Ç—ë—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω',
            data: {
                recruiter: deleteRecruiter
            }
        })

        
    }catch(err){
        next(err);
    }
  };

  async patchRecruiterData(req,res,next) {
    try{
        const userId = req.userId;
        const id = req.params.id;
        const updateData = req.body;
        const updateRecruiter = await RecruiterService.patchRecruiterData(id, userId, updateData)
        res.json({
            success: true,
            message: '–î–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∫—Ä—É—Ç—ë—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω—ã',
            data: {updateRecruiter: updateRecruiter}
        })
    }catch(err){
        next(err);
    }
  };

  async updateRecruiterStatus(req,res,next) {
    try{
      const userId = req.userId;
      const id = req.params.id;
      const newStatus = req.body.status;
      const notes = req.body.notes;
      const newRecruiterStatus = await RecruiterService.updateRecruiterStatus(id, userId, newStatus, notes);
      const statusMessages = {
        contacting: "üìû –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º",
        waiting: "‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞", 
        in_process: "üí¨ –ê–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞–µ–º—Å—è —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º",
        got_offer: "üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ü–æ–ª—É—á–µ–Ω –æ—Ñ—Ñ–µ—Ä!",
        rejected: "‚ùå –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–æ—Ç–∫–∞–∑)",
        archived: "üìÅ –†–µ–∫—Ä—É—Ç–µ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤"
      };

      res.json({
        success: true,
        message: statusMessages[newStatus] || '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω',
        data: {
          newRecruiterStatus: newRecruiterStatus
        }
      })


    }catch(err) {
      next(err);
    }
  };

  async getRecruiterWithHistory(req, res, next) {
    try {
      const { id } = req.params;
      const userId = req.userId;
    
      
      const recruiter = await RecruiterService.getRecruiterWithHistory(id, userId);
      
      res.json({
        success: true,
        message: "–†–µ–∫—Ä—É—Ç–µ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π",
        data: { recruiter }
      });
    } catch (err) {
      next(err);
    }
  }
}

module.exports = new RecruiterController();
