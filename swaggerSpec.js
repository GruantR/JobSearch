const swaggerJSDoc = require("swagger-jsdoc");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è swagger-jsdoc
const options = {
  // –ë–ª–æ–∫ definition - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API
  definition: {
    // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è OpenAPI
    openapi: "3.0.0", // –í–µ—Ä—Å–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API
    info: {
      title: "JobSearch API", // –ù–∞–∑–≤–∞–Ω–∏–µ API
      version: "1.0.0", // –í–µ—Ä—Å–∏—è API
      description: "API –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã", // –û–ø–∏—Å–∞–Ω–∏–µ
      contact: {
        name: "API Support", // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        email: "support@jobsearch.com",
      },
    },

    // –°–µ—Ä–≤–µ—Ä—ã, –≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ API
    servers: [
      {
        url: "http://localhost:3000/api", // URL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        description: "Development server",
      },
      //   {
      //     url: 'https://api.jobsearch.com/api',  // URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      //     description: 'Production server',
      //   },
    ],

    // üîπ –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
    components: {
      // –°—Ö–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
      securitySchemes: {
        bearerAuth: {
          // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–æ—É—Ç–∞—Ö)
          type: "http", // –¢–∏–ø - HTTP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          scheme: "bearer", // –°—Ö–µ–º–∞ - Bearer token
          bearerFormat: "JWT", // –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ - JWT
          description:
            "JWT —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/login",
        },
      },

      // –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (—Å—Ö–µ–º—ã)
      schemas: {
        // –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User: {
          type: "object", // –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
          required: ["id", "email"], // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          properties: {
            id: {
              type: "integer", // –ß–∏—Å–ª–æ–≤–æ–π ID
              example: 1, // –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            email: {
              type: "string",
              format: "email", // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email
              example: "user@example.com",
              description: "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            createdAt: {
              type: "string",
              format: "date-time", // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏ ISO
              example: "2024-01-15T10:30:00.000Z",
              description: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            updatedAt: {
              type: "string",
              format: "date-time",
              example: "2024-01-20T15:45:00.000Z",
              description: "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            },
          },
        },
        UserProfile: {
          type: "object",
          required: ["id", "userId"], // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          properties: {
            id: {
              type: "integer",
              example: 1,
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è",
            },
            fullName: {
              type: "string",
              example: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
              description: "–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              nullable: true,
            },
            phoneNumber: {
              type: "string",
              example: "+79991234567",
              description: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              nullable: true,
            },
            userId: {
              type: "integer",
              example: 1,
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å",
            },
            createdAt: {
              type: "string",
              format: "date-time",
              example: "2024-01-15T10:30:00.000Z",
              description: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            },
            updatedAt: {
              type: "string",
              format: "date-time",
              example: "2024-01-20T15:45:00.000Z",
              description: "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            },
          },
        },

        Recruiter: {
          type: "object",
          required: ["id", "userId"], // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          properties: {
            id: {
              type: "integer",
              example: 1,
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è",
            },
            userId: {
              type: "integer",
              example: 1,
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å",
            },
            fullName: {
              type: "string",
              example: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
              description: "–§–ò–û —Ä–µ–∫—Ä–µ—Ç—ë—Ä–∞",
            },
            company: {
              type: "string",
              example: "Tech Company Inc.",
              description: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–µ–∫—Ä–µ—Ç—ë—Ä–∞",
            },
            linkedinUrl: {
              type: "string",
              example: "https://linkedin.com/in/ivanov",
              description: "–°—Å—ã–ª–∫–∞ linkedin –Ω–∞ —Ä–µ–∫—Ä–µ—Ç—ë—Ä–∞",
            },
            contactInfo: {
              type: "string",
              example: "ivanov@company.com, +79991234567",
              description: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–∫—Ä–µ—Ç—ë—Ä–æ–º",
            },
            position: {
              type: "string",
              example: "HR Manager",
              description: "–ó–∞–Ω–∏–º–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–µ–∫—Ä–µ—Ç—ë—Ä–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
            },
            status: {
              type: "string",
              enum: [
                "contacting",
                "waiting",
                "in_process",
                "got_offer",
                "rejected",
                "archived",
              ],
              example: "contacting",
              description: "—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ –æ–±—â–µ–Ω–∏—é —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º",
            },
            notes: {
              type: "string",
              example: "–û—á–µ–Ω—å –æ—Ç–∑—ã–≤—á–∏–≤—ã–π —Ä–µ–∫—Ä—É—Ç–µ—Ä",
              description: "–õ—é–±–∞—è –∑–∞–º–µ—Ç–∫–∞",
            },
            lastContactDate: {
              type: "string",
              format: "date-time",
              example: "2024-01-15T10:30:00.000Z",
              description: "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
            },
            createdAt: {
              type: "string",
              format: "date-time",
              example: "2024-01-15T10:30:00.000Z",
              description: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            },
            updatedAt: {
              type: "string",
              format: "date-time",
              example: "2024-01-20T15:45:00.000Z",
              description: "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            },
          },
        },

        StatusHistory: {
            type: "object",
            required: ["id", "entityType", "entityId", "newStatus", "changedAt"],
            properties: {
              id: {
                type: "integer",
                example: 1,
                description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤",
              },
              entityType: {
                type: "string",
                enum: ["recruiter", "vacancy"],
                example: "recruiter",
                description: "–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤",
              },
              entityId: {
                type: "integer",
                example: 1,
                description: "ID —Å—É—â–Ω–æ—Å—Ç–∏ (—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏)",
              },
              oldStatus: {
                type: "string",
                example: "contacting",
                description: "–°—Ç–∞—Ç—É—Å –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                nullable: true
              },
              newStatus: {
                type: "string",
                example: "waiting",
                description: "–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
              },
              notes: {
                type: "string",
                example: "–†–µ–∫—Ä—É—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
                description: "–ó–∞–º–µ—Ç–∫–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
                nullable: true
              },
              changedAt: {
                type: "string",
                format: "date-time",
                example: "2024-01-15T10:30:00.000Z",
                description: "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
              },
            },
          },

        // –ë–ê–ó–û–í–ê–Ø –°–•–ï–ú–ê –û–®–ò–ë–ö–ò (–æ–±—â–∏–µ –ø–æ–ª—è)
        BaseErrorResponse: {
          type: "object",
          properties: {
            success: { type: "boolean", example: false },
            message: { type: "string" },
          },
          required: ["success", "message"],
        },

        // –ö–ê–°–¢–û–ú–ù–´–ï –û–®–ò–ë–ö–ò (401, 403, 409, 500)
        CustomErrorResponse: {
          allOf: [{ $ref: "#/components/schemas/BaseErrorResponse" }],
        },

        // –û–®–ò–ë–ö–ò EXPRESS-VALIDATOR (400)
        ValidationErrorResponse: {
          allOf: [
            { $ref: "#/components/schemas/BaseErrorResponse" },
            {
              type: "object",
              properties: {
                errors: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      field: {
                        type: "string",
                        example: "email",
                        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å –æ—à–∏–±–∫–æ–π",
                      },
                      message: {
                        type: "string",
                        example: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
                        description: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
                      },
                      value: {
                        type: "string",
                        example: "kon9mail.com",
                        description: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                      },
                    },
                  },
                },
              },
              required: ["errors"],
            },
          ],
        },

        // –û–®–ò–ë–ö–ê –° –¢–ï–ö–°–¢–û–ú (401, 403, 500)
        ErrorWithTextResponse: {
          allOf: [
            { $ref: "#/components/schemas/BaseErrorResponse" },
            {
              type: "object",
              properties: {
                error: {
                  type: "string",
                  example: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
                },
              },
              required: ["error"],
            },
          ],
        },

        // –ú–æ–¥–µ–ª—å –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        // Vacancy: {
        //   type: 'object',
        //   properties: {
        //     id: {
        //       type: 'integer',
        //       example: 1
        //     },
        //     companyName: {
        //       type: 'string',
        //       example: 'Google'
        //     },
        //     jobTitle: {
        //       type: 'string',
        //       example: 'Frontend Developer'
        //     },
        //     status: {
        //       type: 'string',
        //       enum: ['found', 'applied', 'waiting', 'interview', 'offer', 'rejected', 'archived'],
        //       example: 'found'
        //     }
        //   }
        // },


      },
    },

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    tags: [
      {
        name: "Users",
        description: "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
      },
      {
        name: "Auth",
        description: "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
      },
      {
        name: "Vacancies",
        description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏",
      },
      {
        name: "Recruiters",
        description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏",
      },
    ],
  },

  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å @swagger
  apis: [
    "./src/routes/*.js", // –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ routes
    "./src/routes/**/*.js", // –í—Å–µ —Ñ–∞–π–ª—ã –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö routes
    "./src/controllers/*.js", // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  ],
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Swagger
const swaggerSpec = swaggerJSDoc(options);

module.exports = swaggerSpec;
